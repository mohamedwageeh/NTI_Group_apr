
ATmega32_Interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000956  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000009ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  00800060  00800060  000009ca  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000009ca  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009fc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d0  00000000  00000000  00000a38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000173b  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b5d  00000000  00000000  00002343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea2  00000000  00000000  00002ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000414  00000000  00000000  00003d44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007e5  00000000  00000000  00004158  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d50  00000000  00000000  0000493d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000568d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 ec 02 	jmp	0x5d8	; 0x5d8 <__vector_1>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 7d 03 	jmp	0x6fa	; 0x6fa <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e5       	ldi	r30, 0x56	; 86
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	af 36       	cpi	r26, 0x6F	; 111
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a9 04 	jmp	0x952	; 0x952 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	2f ef       	ldi	r18, 0xFF	; 255
  94:	83 ed       	ldi	r24, 0xD3	; 211
  96:	90 e3       	ldi	r25, 0x30	; 48
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	80 40       	sbci	r24, 0x00	; 0
  9c:	90 40       	sbci	r25, 0x00	; 0
  9e:	e1 f7       	brne	.-8      	; 0x98 <main+0x6>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <main+0x10>
  a2:	00 00       	nop
	//M_SPIInit();
	//M_I2CInit();
	//H_EEPROM16K_Init();
	
	_delay_ms(1000);
	H_LcdInit();
  a4:	0e 94 2f 01 	call	0x25e	; 0x25e <H_LcdInit>
	H_EEPROM16K_Init();
  a8:	0e 94 75 00 	call	0xea	; 0xea <H_EEPROM16K_Init>
	u8 counter = H_EEPROM16K_Read(1,20);
  ac:	64 e1       	ldi	r22, 0x14	; 20
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	0e 94 90 00 	call	0x120	; 0x120 <H_EEPROM16K_Read>
  b4:	c8 2f       	mov	r28, r24
	while(1)
	{
		H_EEPROM16K_Write(1,20,counter);
  b6:	4c 2f       	mov	r20, r28
  b8:	64 e1       	ldi	r22, 0x14	; 20
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	0e 94 78 00 	call	0xf0	; 0xf0 <H_EEPROM16K_Write>
		H_LcdWriteNumber(counter);
  c0:	6c 2f       	mov	r22, r28
  c2:	70 e0       	ldi	r23, 0x00	; 0
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	90 e0       	ldi	r25, 0x00	; 0
  c8:	0e 94 02 04 	call	0x804	; 0x804 <__floatunsisf>
  cc:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <H_LcdWriteNumber>
		counter++;
  d0:	cf 5f       	subi	r28, 0xFF	; 255
  d2:	2f ef       	ldi	r18, 0xFF	; 255
  d4:	89 e6       	ldi	r24, 0x69	; 105
  d6:	98 e1       	ldi	r25, 0x18	; 24
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	80 40       	sbci	r24, 0x00	; 0
  dc:	90 40       	sbci	r25, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <main+0x46>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <main+0x50>
  e2:	00 00       	nop
		_delay_ms(500);
		H_LcdClear();
  e4:	0e 94 d6 01 	call	0x3ac	; 0x3ac <H_LcdClear>
  e8:	e6 cf       	rjmp	.-52     	; 0xb6 <main+0x24>

000000ea <H_EEPROM16K_Init>:

#include "EEPROM_AT24C16A.h"

void H_EEPROM16K_Init(void)
{
	M_I2CInit();
  ea:	0e 94 13 03 	call	0x626	; 0x626 <M_I2CInit>
  ee:	08 95       	ret

000000f0 <H_EEPROM16K_Write>:
}

void H_EEPROM16K_Write(u8 u8_LocalPage , u8 u8_LocalByte , u8 u8_LocalData) //local byte means word address that data will be stored in
{
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	18 2f       	mov	r17, r24
  f8:	d6 2f       	mov	r29, r22
  fa:	c4 2f       	mov	r28, r20
	M_I2CStartCondition();
  fc:	0e 94 19 03 	call	0x632	; 0x632 <M_I2CStartCondition>
	M_I2CMasterSendSlaveAddressWrite( 0x50 | u8_LocalPage ); //(0101 0000) = (0x50) ORing with page 2 for example (0000 0010) --> result = (0101 0010) and this result will be shifted to left inside the function -> (1010 0100)
 100:	81 2f       	mov	r24, r17
 102:	80 65       	ori	r24, 0x50	; 80
 104:	0e 94 3c 03 	call	0x678	; 0x678 <M_I2CMasterSendSlaveAddressWrite>
	M_I2CMasterSendByte(u8_LocalByte);
 108:	8d 2f       	mov	r24, r29
 10a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <M_I2CMasterSendByte>
	M_I2CMasterSendByte(u8_LocalData);
 10e:	8c 2f       	mov	r24, r28
 110:	0e 94 59 03 	call	0x6b2	; 0x6b2 <M_I2CMasterSendByte>
	M_I2CStopCondition();
 114:	0e 94 27 03 	call	0x64e	; 0x64e <M_I2CStopCondition>
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	08 95       	ret

00000120 <H_EEPROM16K_Read>:

u8   H_EEPROM16K_Read(u8 u8_LocalPage, u8 u8_LocalByte)
{
 120:	cf 93       	push	r28
 122:	df 93       	push	r29
 124:	c8 2f       	mov	r28, r24
 126:	d6 2f       	mov	r29, r22
	u8 u8_LocalData = 0;
	M_I2CStartCondition();
 128:	0e 94 19 03 	call	0x632	; 0x632 <M_I2CStartCondition>
	M_I2CMasterSendSlaveAddressWrite( 0x50 | u8_LocalPage ); //write first
 12c:	c0 65       	ori	r28, 0x50	; 80
 12e:	8c 2f       	mov	r24, r28
 130:	0e 94 3c 03 	call	0x678	; 0x678 <M_I2CMasterSendSlaveAddressWrite>
	M_I2CMasterSendByte(u8_LocalByte); //then send word address that contains data which master wants
 134:	8d 2f       	mov	r24, r29
 136:	0e 94 59 03 	call	0x6b2	; 0x6b2 <M_I2CMasterSendByte>
	
	M_I2CRepeatedStart(); //start again for reading process
 13a:	0e 94 2e 03 	call	0x65c	; 0x65c <M_I2CRepeatedStart>
	M_I2CMasterSendSlaveAddressRead(0x50 | u8_LocalPage); //(0101 0000) = (0x50) ORing with page 2 for example (0000 0010) --> result = (0101 0010) and this result will be shifted to left inside the function and then ORing with 1 -> (1010 0101)
 13e:	8c 2f       	mov	r24, r28
 140:	0e 94 49 03 	call	0x692	; 0x692 <M_I2CMasterSendSlaveAddressRead>
	u8_LocalData = M_I2CMasterReadByte();
 144:	0e 94 68 03 	call	0x6d0	; 0x6d0 <M_I2CMasterReadByte>
 148:	c8 2f       	mov	r28, r24
	M_I2CStopCondition();
 14a:	0e 94 27 03 	call	0x64e	; 0x64e <M_I2CStopCondition>
	
	return u8_LocalData;
 14e:	8c 2f       	mov	r24, r28
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <H_LcdWriteCharacter>:
	while(U8_LocalPtr[u8_LocalCounter] != '\0')
	{
	     H_LcdWriteCharacter(U8_LocalPtr[u8_LocalCounter]);
		 u8_LocalCounter++;
	}
}
 156:	cf 93       	push	r28
 158:	c8 2f       	mov	r28, r24
 15a:	61 e0       	ldi	r22, 0x01	; 1
 15c:	85 e1       	ldi	r24, 0x15	; 21
 15e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 162:	60 e0       	ldi	r22, 0x00	; 0
 164:	86 e1       	ldi	r24, 0x16	; 22
 166:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 16a:	8b b3       	in	r24, 0x1b	; 27
 16c:	9c 2f       	mov	r25, r28
 16e:	90 7f       	andi	r25, 0xF0	; 240
 170:	8f 70       	andi	r24, 0x0F	; 15
 172:	89 2b       	or	r24, r25
 174:	8b bb       	out	0x1b, r24	; 27
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	87 e1       	ldi	r24, 0x17	; 23
 17a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 17e:	8f e9       	ldi	r24, 0x9F	; 159
 180:	9f e0       	ldi	r25, 0x0F	; 15
 182:	01 97       	sbiw	r24, 0x01	; 1
 184:	f1 f7       	brne	.-4      	; 0x182 <H_LcdWriteCharacter+0x2c>
 186:	00 c0       	rjmp	.+0      	; 0x188 <H_LcdWriteCharacter+0x32>
 188:	00 00       	nop
 18a:	60 e0       	ldi	r22, 0x00	; 0
 18c:	87 e1       	ldi	r24, 0x17	; 23
 18e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 192:	8f e1       	ldi	r24, 0x1F	; 31
 194:	9e e4       	ldi	r25, 0x4E	; 78
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <H_LcdWriteCharacter+0x40>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <H_LcdWriteCharacter+0x46>
 19c:	00 00       	nop
 19e:	20 e1       	ldi	r18, 0x10	; 16
 1a0:	c2 9f       	mul	r28, r18
 1a2:	c0 01       	movw	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	9b b3       	in	r25, 0x1b	; 27
 1a8:	9f 70       	andi	r25, 0x0F	; 15
 1aa:	89 2b       	or	r24, r25
 1ac:	8b bb       	out	0x1b, r24	; 27
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	87 e1       	ldi	r24, 0x17	; 23
 1b2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 1b6:	8f e9       	ldi	r24, 0x9F	; 159
 1b8:	9f e0       	ldi	r25, 0x0F	; 15
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	f1 f7       	brne	.-4      	; 0x1ba <H_LcdWriteCharacter+0x64>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <H_LcdWriteCharacter+0x6a>
 1c0:	00 00       	nop
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	87 e1       	ldi	r24, 0x17	; 23
 1c6:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 1ca:	8f e1       	ldi	r24, 0x1F	; 31
 1cc:	9e e4       	ldi	r25, 0x4E	; 78
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <H_LcdWriteCharacter+0x78>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <H_LcdWriteCharacter+0x7e>
 1d4:	00 00       	nop
 1d6:	cf 91       	pop	r28
 1d8:	08 95       	ret

000001da <H_LcdWriteCommand>:
 1da:	cf 93       	push	r28
 1dc:	c8 2f       	mov	r28, r24
 1de:	60 e0       	ldi	r22, 0x00	; 0
 1e0:	85 e1       	ldi	r24, 0x15	; 21
 1e2:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 1e6:	60 e0       	ldi	r22, 0x00	; 0
 1e8:	86 e1       	ldi	r24, 0x16	; 22
 1ea:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 1ee:	8b b3       	in	r24, 0x1b	; 27
 1f0:	9c 2f       	mov	r25, r28
 1f2:	90 7f       	andi	r25, 0xF0	; 240
 1f4:	8f 70       	andi	r24, 0x0F	; 15
 1f6:	89 2b       	or	r24, r25
 1f8:	8b bb       	out	0x1b, r24	; 27
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	87 e1       	ldi	r24, 0x17	; 23
 1fe:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 202:	8f e9       	ldi	r24, 0x9F	; 159
 204:	9f e0       	ldi	r25, 0x0F	; 15
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <H_LcdWriteCommand+0x2c>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <H_LcdWriteCommand+0x32>
 20c:	00 00       	nop
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	87 e1       	ldi	r24, 0x17	; 23
 212:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 216:	8f e1       	ldi	r24, 0x1F	; 31
 218:	9e e4       	ldi	r25, 0x4E	; 78
 21a:	01 97       	sbiw	r24, 0x01	; 1
 21c:	f1 f7       	brne	.-4      	; 0x21a <H_LcdWriteCommand+0x40>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <H_LcdWriteCommand+0x46>
 220:	00 00       	nop
 222:	20 e1       	ldi	r18, 0x10	; 16
 224:	c2 9f       	mul	r28, r18
 226:	c0 01       	movw	r24, r0
 228:	11 24       	eor	r1, r1
 22a:	9b b3       	in	r25, 0x1b	; 27
 22c:	9f 70       	andi	r25, 0x0F	; 15
 22e:	89 2b       	or	r24, r25
 230:	8b bb       	out	0x1b, r24	; 27
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	87 e1       	ldi	r24, 0x17	; 23
 236:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 23a:	8f e9       	ldi	r24, 0x9F	; 159
 23c:	9f e0       	ldi	r25, 0x0F	; 15
 23e:	01 97       	sbiw	r24, 0x01	; 1
 240:	f1 f7       	brne	.-4      	; 0x23e <H_LcdWriteCommand+0x64>
 242:	00 c0       	rjmp	.+0      	; 0x244 <H_LcdWriteCommand+0x6a>
 244:	00 00       	nop
 246:	60 e0       	ldi	r22, 0x00	; 0
 248:	87 e1       	ldi	r24, 0x17	; 23
 24a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <M_PinWrite>
 24e:	8f e1       	ldi	r24, 0x1F	; 31
 250:	9e e4       	ldi	r25, 0x4E	; 78
 252:	01 97       	sbiw	r24, 0x01	; 1
 254:	f1 f7       	brne	.-4      	; 0x252 <H_LcdWriteCommand+0x78>
 256:	00 c0       	rjmp	.+0      	; 0x258 <H_LcdWriteCommand+0x7e>
 258:	00 00       	nop
 25a:	cf 91       	pop	r28
 25c:	08 95       	ret

0000025e <H_LcdInit>:
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	85 e1       	ldi	r24, 0x15	; 21
 262:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_PinMode>
 266:	61 e0       	ldi	r22, 0x01	; 1
 268:	87 e1       	ldi	r24, 0x17	; 23
 26a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_PinMode>
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	86 e1       	ldi	r24, 0x16	; 22
 272:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_PinMode>
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	8e e0       	ldi	r24, 0x0E	; 14
 27a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_PinMode>
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	8f e0       	ldi	r24, 0x0F	; 15
 282:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_PinMode>
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	80 e1       	ldi	r24, 0x10	; 16
 28a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_PinMode>
 28e:	61 e0       	ldi	r22, 0x01	; 1
 290:	81 e1       	ldi	r24, 0x11	; 17
 292:	0e 94 da 01 	call	0x3b4	; 0x3b4 <M_PinMode>
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	89 e6       	ldi	r24, 0x69	; 105
 29a:	98 e1       	ldi	r25, 0x18	; 24
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <H_LcdInit+0x3e>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <H_LcdInit+0x48>
 2a6:	00 00       	nop
 2a8:	83 e3       	ldi	r24, 0x33	; 51
 2aa:	0e 94 ed 00 	call	0x1da	; 0x1da <H_LcdWriteCommand>
 2ae:	82 e3       	ldi	r24, 0x32	; 50
 2b0:	0e 94 ed 00 	call	0x1da	; 0x1da <H_LcdWriteCommand>
 2b4:	88 e2       	ldi	r24, 0x28	; 40
 2b6:	0e 94 ed 00 	call	0x1da	; 0x1da <H_LcdWriteCommand>
 2ba:	8c e0       	ldi	r24, 0x0C	; 12
 2bc:	0e 94 ed 00 	call	0x1da	; 0x1da <H_LcdWriteCommand>
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 ed 00 	call	0x1da	; 0x1da <H_LcdWriteCommand>
 2c6:	86 e0       	ldi	r24, 0x06	; 6
 2c8:	0e 94 ed 00 	call	0x1da	; 0x1da <H_LcdWriteCommand>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 ed 00 	call	0x1da	; 0x1da <H_LcdWriteCommand>
 2d2:	08 95       	ret

000002d4 <H_LcdWriteNumber>:

void H_LcdWriteNumber(f64 f64_LocalNumber)  //124 for example
{
 2d4:	cf 92       	push	r12
 2d6:	df 92       	push	r13
 2d8:	ef 92       	push	r14
 2da:	ff 92       	push	r15
 2dc:	1f 93       	push	r17
 2de:	cf 93       	push	r28
 2e0:	df 93       	push	r29
 2e2:	cd b7       	in	r28, 0x3d	; 61
 2e4:	de b7       	in	r29, 0x3e	; 62
 2e6:	2a 97       	sbiw	r28, 0x0a	; 10
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	f8 94       	cli
 2ec:	de bf       	out	0x3e, r29	; 62
 2ee:	0f be       	out	0x3f, r0	; 63
 2f0:	cd bf       	out	0x3d, r28	; 61
	s32 s32_LocalNumberCopy = f64_LocalNumber;
 2f2:	0e 94 cc 03 	call	0x798	; 0x798 <__fixsfsi>
 2f6:	6b 01       	movw	r12, r22
 2f8:	7c 01       	movw	r14, r24
	//f64 f64_LocalNumberDecimalPart = f64_LocalNumber - s32_LocalNumberCopy;
	u8 u8_LocalAraay[10] = {0};
 2fa:	fe 01       	movw	r30, r28
 2fc:	31 96       	adiw	r30, 0x01	; 1
 2fe:	8a e0       	ldi	r24, 0x0A	; 10
 300:	df 01       	movw	r26, r30
 302:	1d 92       	st	X+, r1
 304:	8a 95       	dec	r24
 306:	e9 f7       	brne	.-6      	; 0x302 <H_LcdWriteNumber+0x2e>
	 }
	
	
 }*/
	
	if(s32_LocalNumberCopy == 0)
 308:	c1 14       	cp	r12, r1
 30a:	d1 04       	cpc	r13, r1
 30c:	e1 04       	cpc	r14, r1
 30e:	f1 04       	cpc	r15, r1
 310:	21 f4       	brne	.+8      	; 0x31a <H_LcdWriteNumber+0x46>
	{
		H_LcdWriteCharacter('0');
 312:	80 e3       	ldi	r24, 0x30	; 48
 314:	0e 94 ab 00 	call	0x156	; 0x156 <H_LcdWriteCharacter>
 318:	0d c0       	rjmp	.+26     	; 0x334 <H_LcdWriteNumber+0x60>
	}
	
	else if(s32_LocalNumberCopy < 0)
 31a:	ff 20       	and	r15, r15
 31c:	5c f4       	brge	.+22     	; 0x334 <H_LcdWriteNumber+0x60>
	{
		H_LcdWriteCharacter('-');
 31e:	8d e2       	ldi	r24, 0x2D	; 45
 320:	0e 94 ab 00 	call	0x156	; 0x156 <H_LcdWriteCharacter>
		s32_LocalNumberCopy = s32_LocalNumberCopy * (-1);
 324:	f0 94       	com	r15
 326:	e0 94       	com	r14
 328:	d0 94       	com	r13
 32a:	c0 94       	com	r12
 32c:	c1 1c       	adc	r12, r1
 32e:	d1 1c       	adc	r13, r1
 330:	e1 1c       	adc	r14, r1
 332:	f1 1c       	adc	r15, r1
		 u8_LocalCounter++;
	}
}

void H_LcdWriteNumber(f64 f64_LocalNumber)  //124 for example
{
 334:	10 e0       	ldi	r17, 0x00	; 0
 336:	16 c0       	rjmp	.+44     	; 0x364 <H_LcdWriteNumber+0x90>
		s32_LocalNumberCopy = s32_LocalNumberCopy * (-1);
	}
	
	while(s32_LocalNumberCopy != 0)                             // 124 for example
	{
	u8_LocalAraay[s8_LocalCounter] = s32_LocalNumberCopy % 10;  //u8_LocalArray[0] = 4
 338:	c7 01       	movw	r24, r14
 33a:	b6 01       	movw	r22, r12
 33c:	2a e0       	ldi	r18, 0x0A	; 10
 33e:	30 e0       	ldi	r19, 0x00	; 0
 340:	40 e0       	ldi	r20, 0x00	; 0
 342:	50 e0       	ldi	r21, 0x00	; 0
 344:	0e 94 8a 04 	call	0x914	; 0x914 <__divmodsi4>
 348:	e1 e0       	ldi	r30, 0x01	; 1
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	ec 0f       	add	r30, r28
 34e:	fd 1f       	adc	r31, r29
 350:	e1 0f       	add	r30, r17
 352:	f1 1d       	adc	r31, r1
 354:	17 fd       	sbrc	r17, 7
 356:	fa 95       	dec	r31
 358:	60 83       	st	Z, r22
	s8_LocalCounter++;                                          //make s8_LocalCounter = 1
 35a:	1f 5f       	subi	r17, 0xFF	; 255
	s32_LocalNumberCopy = s32_LocalNumberCopy / 10;             //u8_LocalArray = 12 and so on
 35c:	c2 2e       	mov	r12, r18
 35e:	d3 2e       	mov	r13, r19
 360:	e4 2e       	mov	r14, r20
 362:	f5 2e       	mov	r15, r21
	{
		H_LcdWriteCharacter('-');
		s32_LocalNumberCopy = s32_LocalNumberCopy * (-1);
	}
	
	while(s32_LocalNumberCopy != 0)                             // 124 for example
 364:	c1 14       	cp	r12, r1
 366:	d1 04       	cpc	r13, r1
 368:	e1 04       	cpc	r14, r1
 36a:	f1 04       	cpc	r15, r1
 36c:	29 f7       	brne	.-54     	; 0x338 <H_LcdWriteNumber+0x64>
	{
	u8_LocalAraay[s8_LocalCounter] = s32_LocalNumberCopy % 10;  //u8_LocalArray[0] = 4
	s8_LocalCounter++;                                          //make s8_LocalCounter = 1
	s32_LocalNumberCopy = s32_LocalNumberCopy / 10;             //u8_LocalArray = 12 and so on
	}                                                           //after loop: s8_LocalCounter = 4 -> u8_LocalArray[4] = garbage 
	s8_LocalCounter--;                                          //make s8_LocalCounter = 3 -> u8_LocalArray[3] = 1
 36e:	11 50       	subi	r17, 0x01	; 1
	
	while(s8_LocalCounter >= 0)
 370:	0d c0       	rjmp	.+26     	; 0x38c <H_LcdWriteNumber+0xb8>
	{
		H_LcdWriteCharacter(u8_LocalAraay[s8_LocalCounter]+'0'); //ASCII code of '0' = 48 -> 1+48=50 which is the ASCII code of '1' 
 372:	e1 e0       	ldi	r30, 0x01	; 1
 374:	f0 e0       	ldi	r31, 0x00	; 0
 376:	ec 0f       	add	r30, r28
 378:	fd 1f       	adc	r31, r29
 37a:	e1 0f       	add	r30, r17
 37c:	f1 1d       	adc	r31, r1
 37e:	17 fd       	sbrc	r17, 7
 380:	fa 95       	dec	r31
 382:	80 81       	ld	r24, Z
 384:	80 5d       	subi	r24, 0xD0	; 208
 386:	0e 94 ab 00 	call	0x156	; 0x156 <H_LcdWriteCharacter>
		s8_LocalCounter--;                                       //make s8_LocalCounter = 2 and so on
 38a:	11 50       	subi	r17, 0x01	; 1
	s8_LocalCounter++;                                          //make s8_LocalCounter = 1
	s32_LocalNumberCopy = s32_LocalNumberCopy / 10;             //u8_LocalArray = 12 and so on
	}                                                           //after loop: s8_LocalCounter = 4 -> u8_LocalArray[4] = garbage 
	s8_LocalCounter--;                                          //make s8_LocalCounter = 3 -> u8_LocalArray[3] = 1
	
	while(s8_LocalCounter >= 0)
 38c:	11 23       	and	r17, r17
 38e:	8c f7       	brge	.-30     	; 0x372 <H_LcdWriteNumber+0x9e>
	{
		H_LcdWriteCharacter(u8_LocalAraay[s8_LocalCounter]+'0'); //ASCII code of '0' = 48 -> 1+48=50 which is the ASCII code of '1' 
		s8_LocalCounter--;                                       //make s8_LocalCounter = 2 and so on
	}
 
}
 390:	2a 96       	adiw	r28, 0x0a	; 10
 392:	0f b6       	in	r0, 0x3f	; 63
 394:	f8 94       	cli
 396:	de bf       	out	0x3e, r29	; 62
 398:	0f be       	out	0x3f, r0	; 63
 39a:	cd bf       	out	0x3d, r28	; 61
 39c:	df 91       	pop	r29
 39e:	cf 91       	pop	r28
 3a0:	1f 91       	pop	r17
 3a2:	ff 90       	pop	r15
 3a4:	ef 90       	pop	r14
 3a6:	df 90       	pop	r13
 3a8:	cf 90       	pop	r12
 3aa:	08 95       	ret

000003ac <H_LcdClear>:

void H_LcdClear(void)
{
	H_LcdWriteCommand(0x01); //0x01 is a stored command to clear LCD
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	0e 94 ed 00 	call	0x1da	; 0x1da <H_LcdWriteCommand>
 3b2:	08 95       	ret

000003b4 <M_PinMode>:

#include "DIO.h"

void M_PinMode(u8 x,u8 State)
{
	u8 Pin  = x % 10;
 3b4:	9d ec       	ldi	r25, 0xCD	; 205
 3b6:	89 9f       	mul	r24, r25
 3b8:	91 2d       	mov	r25, r1
 3ba:	11 24       	eor	r1, r1
 3bc:	29 2f       	mov	r18, r25
 3be:	26 95       	lsr	r18
 3c0:	26 95       	lsr	r18
 3c2:	26 95       	lsr	r18
 3c4:	22 0f       	add	r18, r18
 3c6:	32 2f       	mov	r19, r18
 3c8:	33 0f       	add	r19, r19
 3ca:	33 0f       	add	r19, r19
 3cc:	23 0f       	add	r18, r19
 3ce:	82 1b       	sub	r24, r18
 3d0:	28 2f       	mov	r18, r24
	u8 Port = x / 10;
 3d2:	96 95       	lsr	r25
 3d4:	96 95       	lsr	r25
 3d6:	96 95       	lsr	r25
	
	switch(State)
 3d8:	66 23       	and	r22, r22
 3da:	19 f0       	breq	.+6      	; 0x3e2 <M_PinMode+0x2e>
 3dc:	61 30       	cpi	r22, 0x01	; 1
 3de:	e1 f1       	breq	.+120    	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 3e0:	08 95       	ret
	{
		case INPUT:
		
			switch(Port)
 3e2:	92 30       	cpi	r25, 0x02	; 2
 3e4:	a9 f0       	breq	.+42     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 3e6:	18 f4       	brcc	.+6      	; 0x3ee <M_PinMode+0x3a>
 3e8:	91 30       	cpi	r25, 0x01	; 1
 3ea:	31 f0       	breq	.+12     	; 0x3f8 <M_PinMode+0x44>
 3ec:	08 95       	ret
 3ee:	93 30       	cpi	r25, 0x03	; 3
 3f0:	d9 f0       	breq	.+54     	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 3f2:	94 30       	cpi	r25, 0x04	; 4
 3f4:	29 f1       	breq	.+74     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
 3f6:	08 95       	ret
			{
				case GROUP_A:
				ClrBit(DDRA,Pin);
 3f8:	3a b3       	in	r19, 0x1a	; 26
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	02 c0       	rjmp	.+4      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 400:	88 0f       	add	r24, r24
 402:	99 1f       	adc	r25, r25
 404:	2a 95       	dec	r18
 406:	e2 f7       	brpl	.-8      	; 0x400 <__EEPROM_REGION_LENGTH__>
 408:	80 95       	com	r24
 40a:	83 23       	and	r24, r19
 40c:	8a bb       	out	0x1a, r24	; 26
				break;
 40e:	08 95       	ret
				case GROUP_B:
				ClrBit(DDRB,Pin);
 410:	37 b3       	in	r19, 0x17	; 23
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	02 c0       	rjmp	.+4      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 418:	88 0f       	add	r24, r24
 41a:	99 1f       	adc	r25, r25
 41c:	2a 95       	dec	r18
 41e:	e2 f7       	brpl	.-8      	; 0x418 <__EEPROM_REGION_LENGTH__+0x18>
 420:	80 95       	com	r24
 422:	83 23       	and	r24, r19
 424:	87 bb       	out	0x17, r24	; 23
				break;
 426:	08 95       	ret
				case GROUP_C:
				ClrBit(DDRC,Pin);
 428:	34 b3       	in	r19, 0x14	; 20
 42a:	81 e0       	ldi	r24, 0x01	; 1
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	02 c0       	rjmp	.+4      	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
 430:	88 0f       	add	r24, r24
 432:	99 1f       	adc	r25, r25
 434:	2a 95       	dec	r18
 436:	e2 f7       	brpl	.-8      	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 438:	80 95       	com	r24
 43a:	83 23       	and	r24, r19
 43c:	84 bb       	out	0x14, r24	; 20
				break;
 43e:	08 95       	ret
				case GROUP_D:
				ClrBit(SREG,Pin);
 440:	3f b7       	in	r19, 0x3f	; 63
 442:	81 e0       	ldi	r24, 0x01	; 1
 444:	90 e0       	ldi	r25, 0x00	; 0
 446:	02 c0       	rjmp	.+4      	; 0x44c <__EEPROM_REGION_LENGTH__+0x4c>
 448:	88 0f       	add	r24, r24
 44a:	99 1f       	adc	r25, r25
 44c:	2a 95       	dec	r18
 44e:	e2 f7       	brpl	.-8      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 450:	80 95       	com	r24
 452:	83 23       	and	r24, r19
 454:	8f bf       	out	0x3f, r24	; 63
				break;
 456:	08 95       	ret
			}
		
		break;
		case OUTPUT:
		
			switch(Port)
 458:	92 30       	cpi	r25, 0x02	; 2
 45a:	a1 f0       	breq	.+40     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 45c:	18 f4       	brcc	.+6      	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
 45e:	91 30       	cpi	r25, 0x01	; 1
 460:	31 f0       	breq	.+12     	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 462:	08 95       	ret
 464:	93 30       	cpi	r25, 0x03	; 3
 466:	c9 f0       	breq	.+50     	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 468:	94 30       	cpi	r25, 0x04	; 4
 46a:	11 f1       	breq	.+68     	; 0x4b0 <__EEPROM_REGION_LENGTH__+0xb0>
 46c:	08 95       	ret
			{
				case GROUP_A:
				SetBit(DDRA,Pin);
 46e:	3a b3       	in	r19, 0x1a	; 26
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	90 e0       	ldi	r25, 0x00	; 0
 474:	02 c0       	rjmp	.+4      	; 0x47a <__EEPROM_REGION_LENGTH__+0x7a>
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	2a 95       	dec	r18
 47c:	e2 f7       	brpl	.-8      	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 47e:	83 2b       	or	r24, r19
 480:	8a bb       	out	0x1a, r24	; 26
				break;
 482:	08 95       	ret
				case GROUP_B:
				SetBit(DDRB,Pin);
 484:	37 b3       	in	r19, 0x17	; 23
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	90 e0       	ldi	r25, 0x00	; 0
 48a:	02 c0       	rjmp	.+4      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 48c:	88 0f       	add	r24, r24
 48e:	99 1f       	adc	r25, r25
 490:	2a 95       	dec	r18
 492:	e2 f7       	brpl	.-8      	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 494:	83 2b       	or	r24, r19
 496:	87 bb       	out	0x17, r24	; 23
				break;
 498:	08 95       	ret
				case GROUP_C:
				SetBit(DDRC,Pin);
 49a:	34 b3       	in	r19, 0x14	; 20
 49c:	81 e0       	ldi	r24, 0x01	; 1
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
 4a2:	88 0f       	add	r24, r24
 4a4:	99 1f       	adc	r25, r25
 4a6:	2a 95       	dec	r18
 4a8:	e2 f7       	brpl	.-8      	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
 4aa:	83 2b       	or	r24, r19
 4ac:	84 bb       	out	0x14, r24	; 20
				break;
 4ae:	08 95       	ret
				case GROUP_D:
				SetBit(SREG,Pin);
 4b0:	3f b7       	in	r19, 0x3f	; 63
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	02 c0       	rjmp	.+4      	; 0x4bc <__EEPROM_REGION_LENGTH__+0xbc>
 4b8:	88 0f       	add	r24, r24
 4ba:	99 1f       	adc	r25, r25
 4bc:	2a 95       	dec	r18
 4be:	e2 f7       	brpl	.-8      	; 0x4b8 <__EEPROM_REGION_LENGTH__+0xb8>
 4c0:	83 2b       	or	r24, r19
 4c2:	8f bf       	out	0x3f, r24	; 63
 4c4:	08 95       	ret

000004c6 <M_PinWrite>:
	}
}

void M_PinWrite(u8 x,u8 State)
{
	u8 Pin  = x % 10;
 4c6:	9d ec       	ldi	r25, 0xCD	; 205
 4c8:	89 9f       	mul	r24, r25
 4ca:	91 2d       	mov	r25, r1
 4cc:	11 24       	eor	r1, r1
 4ce:	29 2f       	mov	r18, r25
 4d0:	26 95       	lsr	r18
 4d2:	26 95       	lsr	r18
 4d4:	26 95       	lsr	r18
 4d6:	22 0f       	add	r18, r18
 4d8:	32 2f       	mov	r19, r18
 4da:	33 0f       	add	r19, r19
 4dc:	33 0f       	add	r19, r19
 4de:	23 0f       	add	r18, r19
 4e0:	82 1b       	sub	r24, r18
 4e2:	28 2f       	mov	r18, r24
	u8 Port = x / 10;
 4e4:	96 95       	lsr	r25
 4e6:	96 95       	lsr	r25
 4e8:	96 95       	lsr	r25
	
	switch(State)
 4ea:	66 23       	and	r22, r22
 4ec:	19 f0       	breq	.+6      	; 0x4f4 <M_PinWrite+0x2e>
 4ee:	61 30       	cpi	r22, 0x01	; 1
 4f0:	e1 f1       	breq	.+120    	; 0x56a <M_PinWrite+0xa4>
 4f2:	08 95       	ret
	{
	
		
		case LOW:
		
			switch(Port)
 4f4:	92 30       	cpi	r25, 0x02	; 2
 4f6:	a9 f0       	breq	.+42     	; 0x522 <M_PinWrite+0x5c>
 4f8:	18 f4       	brcc	.+6      	; 0x500 <M_PinWrite+0x3a>
 4fa:	91 30       	cpi	r25, 0x01	; 1
 4fc:	31 f0       	breq	.+12     	; 0x50a <M_PinWrite+0x44>
 4fe:	08 95       	ret
 500:	93 30       	cpi	r25, 0x03	; 3
 502:	d9 f0       	breq	.+54     	; 0x53a <M_PinWrite+0x74>
 504:	94 30       	cpi	r25, 0x04	; 4
 506:	29 f1       	breq	.+74     	; 0x552 <M_PinWrite+0x8c>
 508:	08 95       	ret
			{
				case GROUP_A:
				ClrBit(PORTA,Pin);
 50a:	3b b3       	in	r19, 0x1b	; 27
 50c:	81 e0       	ldi	r24, 0x01	; 1
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	02 c0       	rjmp	.+4      	; 0x516 <M_PinWrite+0x50>
 512:	88 0f       	add	r24, r24
 514:	99 1f       	adc	r25, r25
 516:	2a 95       	dec	r18
 518:	e2 f7       	brpl	.-8      	; 0x512 <M_PinWrite+0x4c>
 51a:	80 95       	com	r24
 51c:	83 23       	and	r24, r19
 51e:	8b bb       	out	0x1b, r24	; 27
				break;
 520:	08 95       	ret
				case GROUP_B:
				ClrBit(PORTB,Pin);
 522:	38 b3       	in	r19, 0x18	; 24
 524:	81 e0       	ldi	r24, 0x01	; 1
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	02 c0       	rjmp	.+4      	; 0x52e <M_PinWrite+0x68>
 52a:	88 0f       	add	r24, r24
 52c:	99 1f       	adc	r25, r25
 52e:	2a 95       	dec	r18
 530:	e2 f7       	brpl	.-8      	; 0x52a <M_PinWrite+0x64>
 532:	80 95       	com	r24
 534:	83 23       	and	r24, r19
 536:	88 bb       	out	0x18, r24	; 24
				break;
 538:	08 95       	ret
				case GROUP_C:
				ClrBit(PORTC,Pin);
 53a:	35 b3       	in	r19, 0x15	; 21
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	90 e0       	ldi	r25, 0x00	; 0
 540:	02 c0       	rjmp	.+4      	; 0x546 <M_PinWrite+0x80>
 542:	88 0f       	add	r24, r24
 544:	99 1f       	adc	r25, r25
 546:	2a 95       	dec	r18
 548:	e2 f7       	brpl	.-8      	; 0x542 <M_PinWrite+0x7c>
 54a:	80 95       	com	r24
 54c:	83 23       	and	r24, r19
 54e:	85 bb       	out	0x15, r24	; 21
				break;
 550:	08 95       	ret
				case GROUP_D:
				ClrBit(PORTD,Pin);
 552:	32 b3       	in	r19, 0x12	; 18
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	02 c0       	rjmp	.+4      	; 0x55e <M_PinWrite+0x98>
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	2a 95       	dec	r18
 560:	e2 f7       	brpl	.-8      	; 0x55a <M_PinWrite+0x94>
 562:	80 95       	com	r24
 564:	83 23       	and	r24, r19
 566:	82 bb       	out	0x12, r24	; 18
				break;
 568:	08 95       	ret
				break;
			}
			break;
			case HIGH:
			
			switch(Port)
 56a:	92 30       	cpi	r25, 0x02	; 2
 56c:	a1 f0       	breq	.+40     	; 0x596 <M_PinWrite+0xd0>
 56e:	18 f4       	brcc	.+6      	; 0x576 <M_PinWrite+0xb0>
 570:	91 30       	cpi	r25, 0x01	; 1
 572:	31 f0       	breq	.+12     	; 0x580 <M_PinWrite+0xba>
 574:	08 95       	ret
 576:	93 30       	cpi	r25, 0x03	; 3
 578:	c9 f0       	breq	.+50     	; 0x5ac <M_PinWrite+0xe6>
 57a:	94 30       	cpi	r25, 0x04	; 4
 57c:	11 f1       	breq	.+68     	; 0x5c2 <M_PinWrite+0xfc>
 57e:	08 95       	ret
			{
				case GROUP_A:
				SetBit(PORTA,Pin);
 580:	3b b3       	in	r19, 0x1b	; 27
 582:	81 e0       	ldi	r24, 0x01	; 1
 584:	90 e0       	ldi	r25, 0x00	; 0
 586:	02 c0       	rjmp	.+4      	; 0x58c <M_PinWrite+0xc6>
 588:	88 0f       	add	r24, r24
 58a:	99 1f       	adc	r25, r25
 58c:	2a 95       	dec	r18
 58e:	e2 f7       	brpl	.-8      	; 0x588 <M_PinWrite+0xc2>
 590:	83 2b       	or	r24, r19
 592:	8b bb       	out	0x1b, r24	; 27
				break;
 594:	08 95       	ret
				case GROUP_B:
				SetBit(PORTB,Pin);
 596:	38 b3       	in	r19, 0x18	; 24
 598:	81 e0       	ldi	r24, 0x01	; 1
 59a:	90 e0       	ldi	r25, 0x00	; 0
 59c:	02 c0       	rjmp	.+4      	; 0x5a2 <M_PinWrite+0xdc>
 59e:	88 0f       	add	r24, r24
 5a0:	99 1f       	adc	r25, r25
 5a2:	2a 95       	dec	r18
 5a4:	e2 f7       	brpl	.-8      	; 0x59e <M_PinWrite+0xd8>
 5a6:	83 2b       	or	r24, r19
 5a8:	88 bb       	out	0x18, r24	; 24
				break;
 5aa:	08 95       	ret
				case GROUP_C:
				SetBit(PORTC,Pin);
 5ac:	35 b3       	in	r19, 0x15	; 21
 5ae:	81 e0       	ldi	r24, 0x01	; 1
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	02 c0       	rjmp	.+4      	; 0x5b8 <M_PinWrite+0xf2>
 5b4:	88 0f       	add	r24, r24
 5b6:	99 1f       	adc	r25, r25
 5b8:	2a 95       	dec	r18
 5ba:	e2 f7       	brpl	.-8      	; 0x5b4 <M_PinWrite+0xee>
 5bc:	83 2b       	or	r24, r19
 5be:	85 bb       	out	0x15, r24	; 21
				break;
 5c0:	08 95       	ret
				case GROUP_D:
				SetBit(PORTD,Pin);
 5c2:	32 b3       	in	r19, 0x12	; 18
 5c4:	81 e0       	ldi	r24, 0x01	; 1
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	02 c0       	rjmp	.+4      	; 0x5ce <M_PinWrite+0x108>
 5ca:	88 0f       	add	r24, r24
 5cc:	99 1f       	adc	r25, r25
 5ce:	2a 95       	dec	r18
 5d0:	e2 f7       	brpl	.-8      	; 0x5ca <M_PinWrite+0x104>
 5d2:	83 2b       	or	r24, r19
 5d4:	82 bb       	out	0x12, r24	; 18
 5d6:	08 95       	ret

000005d8 <__vector_1>:
{
	CallBack = ptr;
}

ISR(INT0_vect)
{
 5d8:	1f 92       	push	r1
 5da:	0f 92       	push	r0
 5dc:	0f b6       	in	r0, 0x3f	; 63
 5de:	0f 92       	push	r0
 5e0:	11 24       	eor	r1, r1
 5e2:	2f 93       	push	r18
 5e4:	3f 93       	push	r19
 5e6:	4f 93       	push	r20
 5e8:	5f 93       	push	r21
 5ea:	6f 93       	push	r22
 5ec:	7f 93       	push	r23
 5ee:	8f 93       	push	r24
 5f0:	9f 93       	push	r25
 5f2:	af 93       	push	r26
 5f4:	bf 93       	push	r27
 5f6:	ef 93       	push	r30
 5f8:	ff 93       	push	r31
	CallBack();
 5fa:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <CallBack>
 5fe:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <CallBack+0x1>
 602:	09 95       	icall
 604:	ff 91       	pop	r31
 606:	ef 91       	pop	r30
 608:	bf 91       	pop	r27
 60a:	af 91       	pop	r26
 60c:	9f 91       	pop	r25
 60e:	8f 91       	pop	r24
 610:	7f 91       	pop	r23
 612:	6f 91       	pop	r22
 614:	5f 91       	pop	r21
 616:	4f 91       	pop	r20
 618:	3f 91       	pop	r19
 61a:	2f 91       	pop	r18
 61c:	0f 90       	pop	r0
 61e:	0f be       	out	0x3f, r0	; 63
 620:	0f 90       	pop	r0
 622:	1f 90       	pop	r1
 624:	18 95       	reti

00000626 <M_I2CInit>:

void M_I2CInit(void)
{
	#if   I2C_MODE  ==  MASTER
	//to select Fscl = 400K
	TWBR = 12;
 626:	8c e0       	ldi	r24, 0x0C	; 12
 628:	80 b9       	out	0x00, r24	; 0
	#elif I2C_MODE  ==  SLAVE
	TWAR = 0b10001110; //random address, last bit from left to right (LSB) is 0 to enable general call (broadcasting)
	#endif
	
	//to enable I2C circuit
	SetBit(TWCR,2);
 62a:	86 b7       	in	r24, 0x36	; 54
 62c:	84 60       	ori	r24, 0x04	; 4
 62e:	86 bf       	out	0x36, r24	; 54
 630:	08 95       	ret

00000632 <M_I2CStartCondition>:
}

void M_I2CStartCondition(void)
{
	SetBit(TWCR,5);
 632:	86 b7       	in	r24, 0x36	; 54
 634:	80 62       	ori	r24, 0x20	; 32
 636:	86 bf       	out	0x36, r24	; 54
	
	SetBit(TWCR,7); //to clear the flag bit before checking it (set function make the bit zero for any flag)
 638:	86 b7       	in	r24, 0x36	; 54
 63a:	80 68       	ori	r24, 0x80	; 128
 63c:	86 bf       	out	0x36, r24	; 54
	while((GetBit(TWCR,7)) == 0); //must be one to exit from the loop (one means this process is ended)
 63e:	06 b6       	in	r0, 0x36	; 54
 640:	07 fe       	sbrs	r0, 7
 642:	fd cf       	rjmp	.-6      	; 0x63e <M_I2CStartCondition+0xc>
	
	while( (TWSR & 0xF8) != START_ACK  ); //ANDing TWSR with ( 1111 1000 ) to check the value of first 5 bits from the left
 644:	81 b1       	in	r24, 0x01	; 1
 646:	88 7f       	andi	r24, 0xF8	; 248
 648:	88 30       	cpi	r24, 0x08	; 8
 64a:	e1 f7       	brne	.-8      	; 0x644 <M_I2CStartCondition+0x12>
}
 64c:	08 95       	ret

0000064e <M_I2CStopCondition>:

void M_I2CStopCondition(void)
{
	SetBit(TWCR,4);
 64e:	86 b7       	in	r24, 0x36	; 54
 650:	80 61       	ori	r24, 0x10	; 16
 652:	86 bf       	out	0x36, r24	; 54
	
	SetBit(TWCR,7); 
 654:	86 b7       	in	r24, 0x36	; 54
 656:	80 68       	ori	r24, 0x80	; 128
 658:	86 bf       	out	0x36, r24	; 54
 65a:	08 95       	ret

0000065c <M_I2CRepeatedStart>:
	//while((GetBit(TWCR,7)) == 0);
}

void M_I2CRepeatedStart(void)
{
	SetBit(TWCR,5); //same as start condition function
 65c:	86 b7       	in	r24, 0x36	; 54
 65e:	80 62       	ori	r24, 0x20	; 32
 660:	86 bf       	out	0x36, r24	; 54
	
	SetBit(TWCR,7);
 662:	86 b7       	in	r24, 0x36	; 54
 664:	80 68       	ori	r24, 0x80	; 128
 666:	86 bf       	out	0x36, r24	; 54
	while((GetBit(TWCR,7)) == 0);
 668:	06 b6       	in	r0, 0x36	; 54
 66a:	07 fe       	sbrs	r0, 7
 66c:	fd cf       	rjmp	.-6      	; 0x668 <M_I2CRepeatedStart+0xc>
	
	while( (TWSR & 0xF8) != REP_START_ACK   );
 66e:	81 b1       	in	r24, 0x01	; 1
 670:	88 7f       	andi	r24, 0xF8	; 248
 672:	80 31       	cpi	r24, 0x10	; 16
 674:	e1 f7       	brne	.-8      	; 0x66e <M_I2CRepeatedStart+0x12>
}
 676:	08 95       	ret

00000678 <M_I2CMasterSendSlaveAddressWrite>:

void M_I2CMasterSendSlaveAddressWrite(u8 u8_LocalAddress)
{
	TWDR = (u8_LocalAddress<<1); //shifting to left to make the last bit (operation bit) zero. (sending (address bits + operation bit) from left to right)
 678:	88 0f       	add	r24, r24
 67a:	83 b9       	out	0x03, r24	; 3

	SetBit(TWCR,7); 
 67c:	86 b7       	in	r24, 0x36	; 54
 67e:	80 68       	ori	r24, 0x80	; 128
 680:	86 bf       	out	0x36, r24	; 54
	while((GetBit(TWCR,7)) == 0);
 682:	06 b6       	in	r0, 0x36	; 54
 684:	07 fe       	sbrs	r0, 7
 686:	fd cf       	rjmp	.-6      	; 0x682 <M_I2CMasterSendSlaveAddressWrite+0xa>
	
	while( ( TWSR & 0xF8 ) != SLAVE_AD_AND_WR_ACK );
 688:	81 b1       	in	r24, 0x01	; 1
 68a:	88 7f       	andi	r24, 0xF8	; 248
 68c:	88 31       	cpi	r24, 0x18	; 24
 68e:	e1 f7       	brne	.-8      	; 0x688 <M_I2CMasterSendSlaveAddressWrite+0x10>
}
 690:	08 95       	ret

00000692 <M_I2CMasterSendSlaveAddressRead>:

void M_I2CMasterSendSlaveAddressRead(u8 u8_LocalAddress)
{
	TWDR = ((u8_LocalAddress<<1) | 1); //(shifting to left) + (ORing with one) to make the last bit (operation bit) one. (sending (address bits + operation bit) from left to right)
 692:	90 e0       	ldi	r25, 0x00	; 0
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	81 60       	ori	r24, 0x01	; 1
 69a:	83 b9       	out	0x03, r24	; 3
	
	SetBit(TWCR,7); 
 69c:	86 b7       	in	r24, 0x36	; 54
 69e:	80 68       	ori	r24, 0x80	; 128
 6a0:	86 bf       	out	0x36, r24	; 54
	while((GetBit(TWCR,7)) == 0);
 6a2:	06 b6       	in	r0, 0x36	; 54
 6a4:	07 fe       	sbrs	r0, 7
 6a6:	fd cf       	rjmp	.-6      	; 0x6a2 <M_I2CMasterSendSlaveAddressRead+0x10>
	
	while( (TWSR & 0xF8) != SLAVE_AD_AND_RD_ACK  );
 6a8:	81 b1       	in	r24, 0x01	; 1
 6aa:	88 7f       	andi	r24, 0xF8	; 248
 6ac:	80 34       	cpi	r24, 0x40	; 64
 6ae:	e1 f7       	brne	.-8      	; 0x6a8 <M_I2CMasterSendSlaveAddressRead+0x16>
}
 6b0:	08 95       	ret

000006b2 <M_I2CMasterSendByte>:

void M_I2CMasterSendByte(u8 u8_LocalByte)
{
	TWDR = u8_LocalByte;
 6b2:	83 b9       	out	0x03, r24	; 3
	
	ClrBit(TWCR,5); //must be cleared 
 6b4:	86 b7       	in	r24, 0x36	; 54
 6b6:	8f 7d       	andi	r24, 0xDF	; 223
 6b8:	86 bf       	out	0x36, r24	; 54
	
	SetBit(TWCR,7);
 6ba:	86 b7       	in	r24, 0x36	; 54
 6bc:	80 68       	ori	r24, 0x80	; 128
 6be:	86 bf       	out	0x36, r24	; 54
	while((GetBit(TWCR,7)) == 0);
 6c0:	06 b6       	in	r0, 0x36	; 54
 6c2:	07 fe       	sbrs	r0, 7
 6c4:	fd cf       	rjmp	.-6      	; 0x6c0 <M_I2CMasterSendByte+0xe>
	
	while( (TWSR & 0xF8) != WR_BYTE_ACK  );
 6c6:	81 b1       	in	r24, 0x01	; 1
 6c8:	88 7f       	andi	r24, 0xF8	; 248
 6ca:	88 32       	cpi	r24, 0x28	; 40
 6cc:	e1 f7       	brne	.-8      	; 0x6c6 <M_I2CMasterSendByte+0x14>
}
 6ce:	08 95       	ret

000006d0 <M_I2CMasterReadByte>:

u8   M_I2CMasterReadByte(void)
{
	u8 u8_LocalData = 0;
	ClrBit(TWCR,5);
 6d0:	86 b7       	in	r24, 0x36	; 54
 6d2:	8f 7d       	andi	r24, 0xDF	; 223
 6d4:	86 bf       	out	0x36, r24	; 54
	ClrBit(TWCR,4);
 6d6:	86 b7       	in	r24, 0x36	; 54
 6d8:	8f 7e       	andi	r24, 0xEF	; 239
 6da:	86 bf       	out	0x36, r24	; 54
	SetBit(TWCR,6);
 6dc:	86 b7       	in	r24, 0x36	; 54
 6de:	80 64       	ori	r24, 0x40	; 64
 6e0:	86 bf       	out	0x36, r24	; 54
	
	SetBit(TWCR,7); 
 6e2:	86 b7       	in	r24, 0x36	; 54
 6e4:	80 68       	ori	r24, 0x80	; 128
 6e6:	86 bf       	out	0x36, r24	; 54
	while((GetBit(TWCR,7)) == 0);
 6e8:	06 b6       	in	r0, 0x36	; 54
 6ea:	07 fe       	sbrs	r0, 7
 6ec:	fd cf       	rjmp	.-6      	; 0x6e8 <M_I2CMasterReadByte+0x18>
	
	while( (TWSR & 0xF8) != RD_BYTE_WITH_ACK  );
 6ee:	81 b1       	in	r24, 0x01	; 1
 6f0:	88 7f       	andi	r24, 0xF8	; 248
 6f2:	80 35       	cpi	r24, 0x50	; 80
 6f4:	e1 f7       	brne	.-8      	; 0x6ee <M_I2CMasterReadByte+0x1e>
	
	u8_LocalData = TWDR;
 6f6:	83 b1       	in	r24, 0x03	; 3
	return u8_LocalData;
}
 6f8:	08 95       	ret

000006fa <__vector_10>:
		TCNT0                   = 256 - u8_GlobalRemainTickS; //to start from tick no. 247 again after each (1000) m sec.
	}
}
#elif TIMER0_MODE   == CTC_MODE
ISR(TIMER0_COMP_vect)
{
 6fa:	1f 92       	push	r1
 6fc:	0f 92       	push	r0
 6fe:	0f b6       	in	r0, 0x3f	; 63
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	2f 93       	push	r18
 706:	3f 93       	push	r19
 708:	4f 93       	push	r20
 70a:	5f 93       	push	r21
 70c:	6f 93       	push	r22
 70e:	7f 93       	push	r23
 710:	8f 93       	push	r24
 712:	9f 93       	push	r25
 714:	af 93       	push	r26
 716:	bf 93       	push	r27
 718:	ef 93       	push	r30
 71a:	ff 93       	push	r31
	static u32 u32_StaticLocalCounter = 0;
	u32_StaticLocalCounter++;
 71c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 720:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 724:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 728:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 72c:	01 96       	adiw	r24, 0x01	; 1
 72e:	a1 1d       	adc	r26, r1
 730:	b1 1d       	adc	r27, r1
 732:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 736:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 73a:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 73e:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	if(u32_StaticLocalCounter == u32_Global_No_of_cm) //to check counter = 62
 742:	40 91 66 00 	lds	r20, 0x0066	; 0x800066 <u32_Global_No_of_cm>
 746:	50 91 67 00 	lds	r21, 0x0067	; 0x800067 <u32_Global_No_of_cm+0x1>
 74a:	60 91 68 00 	lds	r22, 0x0068	; 0x800068 <u32_Global_No_of_cm+0x2>
 74e:	70 91 69 00 	lds	r23, 0x0069	; 0x800069 <u32_Global_No_of_cm+0x3>
 752:	84 17       	cp	r24, r20
 754:	95 07       	cpc	r25, r21
 756:	a6 07       	cpc	r26, r22
 758:	b7 07       	cpc	r27, r23
 75a:	69 f4       	brne	.+26     	; 0x776 <__vector_10+0x7c>
	{
		CallBack();
 75c:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <CallBack>
 760:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <CallBack+0x1>
 764:	09 95       	icall
		u32_StaticLocalCounter = 0;
 766:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 76a:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 76e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 772:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
	}
}
 776:	ff 91       	pop	r31
 778:	ef 91       	pop	r30
 77a:	bf 91       	pop	r27
 77c:	af 91       	pop	r26
 77e:	9f 91       	pop	r25
 780:	8f 91       	pop	r24
 782:	7f 91       	pop	r23
 784:	6f 91       	pop	r22
 786:	5f 91       	pop	r21
 788:	4f 91       	pop	r20
 78a:	3f 91       	pop	r19
 78c:	2f 91       	pop	r18
 78e:	0f 90       	pop	r0
 790:	0f be       	out	0x3f, r0	; 63
 792:	0f 90       	pop	r0
 794:	1f 90       	pop	r1
 796:	18 95       	reti

00000798 <__fixsfsi>:
 798:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <__fixunssfsi>
 79c:	68 94       	set
 79e:	b1 11       	cpse	r27, r1
 7a0:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__fp_szero>
 7a4:	08 95       	ret

000007a6 <__fixunssfsi>:
 7a6:	0e 94 47 04 	call	0x88e	; 0x88e <__fp_splitA>
 7aa:	88 f0       	brcs	.+34     	; 0x7ce <__fixunssfsi+0x28>
 7ac:	9f 57       	subi	r25, 0x7F	; 127
 7ae:	98 f0       	brcs	.+38     	; 0x7d6 <__fixunssfsi+0x30>
 7b0:	b9 2f       	mov	r27, r25
 7b2:	99 27       	eor	r25, r25
 7b4:	b7 51       	subi	r27, 0x17	; 23
 7b6:	b0 f0       	brcs	.+44     	; 0x7e4 <__fixunssfsi+0x3e>
 7b8:	e1 f0       	breq	.+56     	; 0x7f2 <__fixunssfsi+0x4c>
 7ba:	66 0f       	add	r22, r22
 7bc:	77 1f       	adc	r23, r23
 7be:	88 1f       	adc	r24, r24
 7c0:	99 1f       	adc	r25, r25
 7c2:	1a f0       	brmi	.+6      	; 0x7ca <__fixunssfsi+0x24>
 7c4:	ba 95       	dec	r27
 7c6:	c9 f7       	brne	.-14     	; 0x7ba <__fixunssfsi+0x14>
 7c8:	14 c0       	rjmp	.+40     	; 0x7f2 <__fixunssfsi+0x4c>
 7ca:	b1 30       	cpi	r27, 0x01	; 1
 7cc:	91 f0       	breq	.+36     	; 0x7f2 <__fixunssfsi+0x4c>
 7ce:	0e 94 61 04 	call	0x8c2	; 0x8c2 <__fp_zero>
 7d2:	b1 e0       	ldi	r27, 0x01	; 1
 7d4:	08 95       	ret
 7d6:	0c 94 61 04 	jmp	0x8c2	; 0x8c2 <__fp_zero>
 7da:	67 2f       	mov	r22, r23
 7dc:	78 2f       	mov	r23, r24
 7de:	88 27       	eor	r24, r24
 7e0:	b8 5f       	subi	r27, 0xF8	; 248
 7e2:	39 f0       	breq	.+14     	; 0x7f2 <__fixunssfsi+0x4c>
 7e4:	b9 3f       	cpi	r27, 0xF9	; 249
 7e6:	cc f3       	brlt	.-14     	; 0x7da <__fixunssfsi+0x34>
 7e8:	86 95       	lsr	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b3 95       	inc	r27
 7f0:	d9 f7       	brne	.-10     	; 0x7e8 <__fixunssfsi+0x42>
 7f2:	3e f4       	brtc	.+14     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f4:	90 95       	com	r25
 7f6:	80 95       	com	r24
 7f8:	70 95       	com	r23
 7fa:	61 95       	neg	r22
 7fc:	7f 4f       	sbci	r23, 0xFF	; 255
 7fe:	8f 4f       	sbci	r24, 0xFF	; 255
 800:	9f 4f       	sbci	r25, 0xFF	; 255
 802:	08 95       	ret

00000804 <__floatunsisf>:
 804:	e8 94       	clt
 806:	09 c0       	rjmp	.+18     	; 0x81a <__floatsisf+0x12>

00000808 <__floatsisf>:
 808:	97 fb       	bst	r25, 7
 80a:	3e f4       	brtc	.+14     	; 0x81a <__floatsisf+0x12>
 80c:	90 95       	com	r25
 80e:	80 95       	com	r24
 810:	70 95       	com	r23
 812:	61 95       	neg	r22
 814:	7f 4f       	sbci	r23, 0xFF	; 255
 816:	8f 4f       	sbci	r24, 0xFF	; 255
 818:	9f 4f       	sbci	r25, 0xFF	; 255
 81a:	99 23       	and	r25, r25
 81c:	a9 f0       	breq	.+42     	; 0x848 <__floatsisf+0x40>
 81e:	f9 2f       	mov	r31, r25
 820:	96 e9       	ldi	r25, 0x96	; 150
 822:	bb 27       	eor	r27, r27
 824:	93 95       	inc	r25
 826:	f6 95       	lsr	r31
 828:	87 95       	ror	r24
 82a:	77 95       	ror	r23
 82c:	67 95       	ror	r22
 82e:	b7 95       	ror	r27
 830:	f1 11       	cpse	r31, r1
 832:	f8 cf       	rjmp	.-16     	; 0x824 <__floatsisf+0x1c>
 834:	fa f4       	brpl	.+62     	; 0x874 <__stack+0x15>
 836:	bb 0f       	add	r27, r27
 838:	11 f4       	brne	.+4      	; 0x83e <__floatsisf+0x36>
 83a:	60 ff       	sbrs	r22, 0
 83c:	1b c0       	rjmp	.+54     	; 0x874 <__stack+0x15>
 83e:	6f 5f       	subi	r22, 0xFF	; 255
 840:	7f 4f       	sbci	r23, 0xFF	; 255
 842:	8f 4f       	sbci	r24, 0xFF	; 255
 844:	9f 4f       	sbci	r25, 0xFF	; 255
 846:	16 c0       	rjmp	.+44     	; 0x874 <__stack+0x15>
 848:	88 23       	and	r24, r24
 84a:	11 f0       	breq	.+4      	; 0x850 <__floatsisf+0x48>
 84c:	96 e9       	ldi	r25, 0x96	; 150
 84e:	11 c0       	rjmp	.+34     	; 0x872 <__stack+0x13>
 850:	77 23       	and	r23, r23
 852:	21 f0       	breq	.+8      	; 0x85c <__floatsisf+0x54>
 854:	9e e8       	ldi	r25, 0x8E	; 142
 856:	87 2f       	mov	r24, r23
 858:	76 2f       	mov	r23, r22
 85a:	05 c0       	rjmp	.+10     	; 0x866 <__stack+0x7>
 85c:	66 23       	and	r22, r22
 85e:	71 f0       	breq	.+28     	; 0x87c <__stack+0x1d>
 860:	96 e8       	ldi	r25, 0x86	; 134
 862:	86 2f       	mov	r24, r22
 864:	70 e0       	ldi	r23, 0x00	; 0
 866:	60 e0       	ldi	r22, 0x00	; 0
 868:	2a f0       	brmi	.+10     	; 0x874 <__stack+0x15>
 86a:	9a 95       	dec	r25
 86c:	66 0f       	add	r22, r22
 86e:	77 1f       	adc	r23, r23
 870:	88 1f       	adc	r24, r24
 872:	da f7       	brpl	.-10     	; 0x86a <__stack+0xb>
 874:	88 0f       	add	r24, r24
 876:	96 95       	lsr	r25
 878:	87 95       	ror	r24
 87a:	97 f9       	bld	r25, 7
 87c:	08 95       	ret

0000087e <__fp_split3>:
 87e:	57 fd       	sbrc	r21, 7
 880:	90 58       	subi	r25, 0x80	; 128
 882:	44 0f       	add	r20, r20
 884:	55 1f       	adc	r21, r21
 886:	59 f0       	breq	.+22     	; 0x89e <__fp_splitA+0x10>
 888:	5f 3f       	cpi	r21, 0xFF	; 255
 88a:	71 f0       	breq	.+28     	; 0x8a8 <__fp_splitA+0x1a>
 88c:	47 95       	ror	r20

0000088e <__fp_splitA>:
 88e:	88 0f       	add	r24, r24
 890:	97 fb       	bst	r25, 7
 892:	99 1f       	adc	r25, r25
 894:	61 f0       	breq	.+24     	; 0x8ae <__fp_splitA+0x20>
 896:	9f 3f       	cpi	r25, 0xFF	; 255
 898:	79 f0       	breq	.+30     	; 0x8b8 <__fp_splitA+0x2a>
 89a:	87 95       	ror	r24
 89c:	08 95       	ret
 89e:	12 16       	cp	r1, r18
 8a0:	13 06       	cpc	r1, r19
 8a2:	14 06       	cpc	r1, r20
 8a4:	55 1f       	adc	r21, r21
 8a6:	f2 cf       	rjmp	.-28     	; 0x88c <__fp_split3+0xe>
 8a8:	46 95       	lsr	r20
 8aa:	f1 df       	rcall	.-30     	; 0x88e <__fp_splitA>
 8ac:	08 c0       	rjmp	.+16     	; 0x8be <__fp_splitA+0x30>
 8ae:	16 16       	cp	r1, r22
 8b0:	17 06       	cpc	r1, r23
 8b2:	18 06       	cpc	r1, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	f1 cf       	rjmp	.-30     	; 0x89a <__fp_splitA+0xc>
 8b8:	86 95       	lsr	r24
 8ba:	71 05       	cpc	r23, r1
 8bc:	61 05       	cpc	r22, r1
 8be:	08 94       	sec
 8c0:	08 95       	ret

000008c2 <__fp_zero>:
 8c2:	e8 94       	clt

000008c4 <__fp_szero>:
 8c4:	bb 27       	eor	r27, r27
 8c6:	66 27       	eor	r22, r22
 8c8:	77 27       	eor	r23, r23
 8ca:	cb 01       	movw	r24, r22
 8cc:	97 f9       	bld	r25, 7
 8ce:	08 95       	ret

000008d0 <__udivmodsi4>:
 8d0:	a1 e2       	ldi	r26, 0x21	; 33
 8d2:	1a 2e       	mov	r1, r26
 8d4:	aa 1b       	sub	r26, r26
 8d6:	bb 1b       	sub	r27, r27
 8d8:	fd 01       	movw	r30, r26
 8da:	0d c0       	rjmp	.+26     	; 0x8f6 <__udivmodsi4_ep>

000008dc <__udivmodsi4_loop>:
 8dc:	aa 1f       	adc	r26, r26
 8de:	bb 1f       	adc	r27, r27
 8e0:	ee 1f       	adc	r30, r30
 8e2:	ff 1f       	adc	r31, r31
 8e4:	a2 17       	cp	r26, r18
 8e6:	b3 07       	cpc	r27, r19
 8e8:	e4 07       	cpc	r30, r20
 8ea:	f5 07       	cpc	r31, r21
 8ec:	20 f0       	brcs	.+8      	; 0x8f6 <__udivmodsi4_ep>
 8ee:	a2 1b       	sub	r26, r18
 8f0:	b3 0b       	sbc	r27, r19
 8f2:	e4 0b       	sbc	r30, r20
 8f4:	f5 0b       	sbc	r31, r21

000008f6 <__udivmodsi4_ep>:
 8f6:	66 1f       	adc	r22, r22
 8f8:	77 1f       	adc	r23, r23
 8fa:	88 1f       	adc	r24, r24
 8fc:	99 1f       	adc	r25, r25
 8fe:	1a 94       	dec	r1
 900:	69 f7       	brne	.-38     	; 0x8dc <__udivmodsi4_loop>
 902:	60 95       	com	r22
 904:	70 95       	com	r23
 906:	80 95       	com	r24
 908:	90 95       	com	r25
 90a:	9b 01       	movw	r18, r22
 90c:	ac 01       	movw	r20, r24
 90e:	bd 01       	movw	r22, r26
 910:	cf 01       	movw	r24, r30
 912:	08 95       	ret

00000914 <__divmodsi4>:
 914:	05 2e       	mov	r0, r21
 916:	97 fb       	bst	r25, 7
 918:	1e f4       	brtc	.+6      	; 0x920 <__divmodsi4+0xc>
 91a:	00 94       	com	r0
 91c:	0e 94 a1 04 	call	0x942	; 0x942 <__negsi2>
 920:	57 fd       	sbrc	r21, 7
 922:	07 d0       	rcall	.+14     	; 0x932 <__divmodsi4_neg2>
 924:	0e 94 68 04 	call	0x8d0	; 0x8d0 <__udivmodsi4>
 928:	07 fc       	sbrc	r0, 7
 92a:	03 d0       	rcall	.+6      	; 0x932 <__divmodsi4_neg2>
 92c:	4e f4       	brtc	.+18     	; 0x940 <__divmodsi4_exit>
 92e:	0c 94 a1 04 	jmp	0x942	; 0x942 <__negsi2>

00000932 <__divmodsi4_neg2>:
 932:	50 95       	com	r21
 934:	40 95       	com	r20
 936:	30 95       	com	r19
 938:	21 95       	neg	r18
 93a:	3f 4f       	sbci	r19, 0xFF	; 255
 93c:	4f 4f       	sbci	r20, 0xFF	; 255
 93e:	5f 4f       	sbci	r21, 0xFF	; 255

00000940 <__divmodsi4_exit>:
 940:	08 95       	ret

00000942 <__negsi2>:
 942:	90 95       	com	r25
 944:	80 95       	com	r24
 946:	70 95       	com	r23
 948:	61 95       	neg	r22
 94a:	7f 4f       	sbci	r23, 0xFF	; 255
 94c:	8f 4f       	sbci	r24, 0xFF	; 255
 94e:	9f 4f       	sbci	r25, 0xFF	; 255
 950:	08 95       	ret

00000952 <_exit>:
 952:	f8 94       	cli

00000954 <__stop_program>:
 954:	ff cf       	rjmp	.-2      	; 0x954 <__stop_program>
